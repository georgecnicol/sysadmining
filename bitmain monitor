# George Nicol
# March 2018
# See use conditions and copyright info at bottom
# This can be run on a cron job. It will hit bitmain devices API to get status, from the status a determination
# is made whether a machine is performing adequately.
# Also checks whether the pool (btc.com and litecoin.org) believes the machine is active or not.
# If the machine is having asic difficulties or considered inactive then send me a text. Reboot the machine if
# it having Asic difficultie.

# As we all know, turning a machine off and then back on againsolves problems all too often.
# Don't forget that you have to set up ssh keys for the bitmain stuff



import paramiko
import socket
import json
import sys
import requests

from twilio.rest import Client




# ---------------------------------------------------------------------
# Some constants
# while we don't need to separate it may come in handy at some point

l3devices = ['xx']
s9devices = ['xx']
baseIP    = 'xxx.xxx.xxx.'
devices   = l3devices+s9devices
api_port = 4028   # for bitmain devices

# this api key gives status for all litecoin workers
# these are read only
lite_api = 'https://www.litecoinpool.org/api?api_key=xxx'

# these api give only status for a single bitcoin worker
# you have to 'allow a watcher' prior to setting this up
# the watcher will give you the access key
# from there you can use 'inspect' in your browser to determine interesting api endpoints
# these are read only

btc_worker1 = 'https://us-pool.api.btc.com/v1/worker/xxx?access_key=xxx&lang=en'
#btc_worker2 = '...etc
btc_apis= [ btc_worker1 ]

# this is useful for mapping ip to common name that you have given worker
# and so on xx1 is the last quartet of the IP for the machine in question
devicemap={'xx1':'worker.name1','xx2':'worker.name2'} 


# --------------------------------------------------------------------
# get worker status from btc.com

def btcstatus(apistocall):
  bad_workers=''
  for api in apistocall:
    btcresponse = requests.get(api)
    if str(btcresponse.status_code) != '200':
      pass
    elif btcresponse.text is not None:
      btcresult=json.loads(btcresponse.text)
      if btcresult["data"]["data"]["worker_status"] != "ACTIVE":
        bad_workers+="subaccountxxxx"+btcresult['data']['data']['worker_name']+' '
    else:
      pass

  return bad_workers



# --------------------------------------------------------------------
# get worker status from litecoin.org


def litecoinstatus(api):
  bad_workers=''
  literesponse = requests.get(api)
  if str(literesponse.status_code) != '200':
    pass
  elif literesponse.text is not None:
    literesult=json.loads(literesponse.text)
    for worker in literesult['workers'].keys():
      if literesult['workers'][worker]['connected'] != True:
        bad_workers+=worker+' '
  else:
    pass

  return bad_workers



# --------------------------------------------------------------------
# ssh to bitmain device to reboot it

def bitmain_exec(bitmainIPs):
  user='xxx'
  cmd = '/sbin/shutdown -r now'
  k = paramiko.RSAKey.from_private_key_file("/path/to/.ssh/id_rsa")
  for IP in bitmainIPs:
    client = paramiko.SSHClient()
    client.load_system_host_keys()
    client.connect(IP, username=user, pkey=k)
    ssh_stdin, ssh_stdout, ssh_stderr = client.exec_command(cmd)
    client.close()



# ---------------------------------------------------------------------
# Use Twilio
# reference: https://www.twilio.com/docs/api/messaging/send-messages

def send_sms(message_body):
  user = "xxxx"
  key = "xxxx"
  twilionum = "+11234567890"
  my_number = "+10987654321"
  data   = [my_number, message_body, twilionum]
  client = Client(user, key)
  if message_body != '':
    client.messages.create(data[0], body=data[1], from_=data[2])




# ---------------------------------------------------------------------
# receive socket data - receiving status from bitmain devices

def linesplit(socket):
  buffer = socket.recv(4096)
  done = False
  while not done:
    more = socket.recv(4096)
    if not more:
      done = True
    else:
      buffer = buffer+more
  if buffer:
    return buffer



# ---------------------------------------------------------------------
# socket connection - checking bitmain devices for status
# return a list of devices that need to be rebooted
# using set because there was an opportunity in response
# to have multiple occurences of the same device get added based on response

def make_connection():
  setofbaddevices=set()
  for device in devices:
    api_ip = baseIP+device
    # there's all kinds of commands you can run, in this example I
    # am just looking at the stats
    # ["summary", "lcd", "stats"]
    for command in ["stats"]:
      try:
        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.connect((api_ip,int(api_port)))
        s.send(json.dumps({"command":command}))
        response = linesplit(s)
        response = response.replace('\x00','')  # there is some bad formatting in bitmain response
        response = response.replace('}{','},{') # there is some bad formatting in bitmain response
        s.close()
        for badness in ['xxxxxxxx','--------']:  # things we don't want to see
          if badness in response:
            setofbaddevices.add(api_ip)

      except socket.error as exc:
        #print("{0}".format(exc))
        pass

  return setofbaddevices


# ---------------------------------------------------------------------
# create a message based on asic faults and perceived status by pool
# we want to keep the message length at zero if there is nothing to say
# that way we dont have to send a text if there is nothing to say

def create_message(dev_map, set_of_problems, litecoinapi, btcapis):
  # first bit of message is based on pool perception
  message = ''
  message += litecoinstatus(litecoinapi)
  message += btcstatus(btcapis)
  if message != '':
    message += "Inactive workers: "+message

  # second bit of message based on asic conditions
  if len(set_of_problems) != 0:
    message+='Attempting to reboot device(s) '
    for machine in set_of_problems:
      worker = dev_map[machine[-2:]]  # we just want the last quartet here for mapping purposes
      message += "{0} ".format(worker )
    message += "due to excessive asic faults."

  return message


#-----------------------------------------------------------------------


if __name__ == "__main__":
  troublemakers = make_connection()
  bitmain_exec(troublemakers)
  send_sms(create_message(devicemap,troublemakers,lite_api,btc_apis))



#Copyright (c) 2014-2018 George Nicol
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are
#permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright notice, this list of
#      conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright notice, this list
#      of conditions and the following disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
#EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
#TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. USE THIS SOFTWARE ONLY
#FOR LEGAL PURPOSES AND AT YOUR OWN RISK. BETTER YET, DON'T USE IT AT ALL.
